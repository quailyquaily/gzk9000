// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/quailyquaily/gzk9000/core"

	"time"
)

func newMemslice(db *gorm.DB, opts ...gen.DOOption) memslice {
	_memslice := memslice{}

	_memslice.memsliceDo.UseDB(db, opts...)
	_memslice.memsliceDo.UseModel(&core.Memslice{})

	tableName := _memslice.memsliceDo.TableName()
	_memslice.ALL = field.NewAsterisk(tableName)
	_memslice.ID = field.NewUint64(tableName, "id")
	_memslice.ResponseType = field.NewInt(tableName, "response_type")
	_memslice.AgentID = field.NewUint64(tableName, "agent_id")
	_memslice.SpeakerID = field.NewUint64(tableName, "speaker_id")
	_memslice.IsMonolog = field.NewBool(tableName, "is_monolog")
	_memslice.IncludedFactIDs = field.NewField(tableName, "included_fact_ids")
	_memslice.ExternalFactIDs = field.NewField(tableName, "external_fact_ids")
	_memslice.RelatedMemsliceIDs = field.NewField(tableName, "related_memslice_ids")
	_memslice.Content = field.NewString(tableName, "content")
	_memslice.Status = field.NewInt(tableName, "status")
	_memslice.CreatedAt = field.NewTime(tableName, "created_at")
	_memslice.UpdatedAt = field.NewTime(tableName, "updated_at")

	_memslice.fillFieldMap()

	return _memslice
}

type memslice struct {
	memsliceDo

	ALL                field.Asterisk
	ID                 field.Uint64
	ResponseType       field.Int
	AgentID            field.Uint64
	SpeakerID          field.Uint64
	IsMonolog          field.Bool
	IncludedFactIDs    field.Field
	ExternalFactIDs    field.Field
	RelatedMemsliceIDs field.Field
	Content            field.String
	Status             field.Int
	CreatedAt          field.Time
	UpdatedAt          field.Time

	fieldMap map[string]field.Expr
}

func (m memslice) Table(newTableName string) *memslice {
	m.memsliceDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memslice) As(alias string) *memslice {
	m.memsliceDo.DO = *(m.memsliceDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memslice) updateTableName(table string) *memslice {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.ResponseType = field.NewInt(table, "response_type")
	m.AgentID = field.NewUint64(table, "agent_id")
	m.SpeakerID = field.NewUint64(table, "speaker_id")
	m.IsMonolog = field.NewBool(table, "is_monolog")
	m.IncludedFactIDs = field.NewField(table, "included_fact_ids")
	m.ExternalFactIDs = field.NewField(table, "external_fact_ids")
	m.RelatedMemsliceIDs = field.NewField(table, "related_memslice_ids")
	m.Content = field.NewString(table, "content")
	m.Status = field.NewInt(table, "status")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *memslice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memslice) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["id"] = m.ID
	m.fieldMap["response_type"] = m.ResponseType
	m.fieldMap["agent_id"] = m.AgentID
	m.fieldMap["speaker_id"] = m.SpeakerID
	m.fieldMap["is_monolog"] = m.IsMonolog
	m.fieldMap["included_fact_ids"] = m.IncludedFactIDs
	m.fieldMap["external_fact_ids"] = m.ExternalFactIDs
	m.fieldMap["related_memslice_ids"] = m.RelatedMemsliceIDs
	m.fieldMap["content"] = m.Content
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m memslice) clone(db *gorm.DB) memslice {
	m.memsliceDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memslice) replaceDB(db *gorm.DB) memslice {
	m.memsliceDo.ReplaceDB(db)
	return m
}

type memsliceDo struct{ gen.DO }

type IMemsliceDo interface {
	gen.SubQuery
	Debug() IMemsliceDo
	WithContext(ctx context.Context) IMemsliceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemsliceDo
	WriteDB() IMemsliceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemsliceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemsliceDo
	Not(conds ...gen.Condition) IMemsliceDo
	Or(conds ...gen.Condition) IMemsliceDo
	Select(conds ...field.Expr) IMemsliceDo
	Where(conds ...gen.Condition) IMemsliceDo
	Order(conds ...field.Expr) IMemsliceDo
	Distinct(cols ...field.Expr) IMemsliceDo
	Omit(cols ...field.Expr) IMemsliceDo
	Join(table schema.Tabler, on ...field.Expr) IMemsliceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemsliceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemsliceDo
	Group(cols ...field.Expr) IMemsliceDo
	Having(conds ...gen.Condition) IMemsliceDo
	Limit(limit int) IMemsliceDo
	Offset(offset int) IMemsliceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemsliceDo
	Unscoped() IMemsliceDo
	Create(values ...*core.Memslice) error
	CreateInBatches(values []*core.Memslice, batchSize int) error
	Save(values ...*core.Memslice) error
	First() (*core.Memslice, error)
	Take() (*core.Memslice, error)
	Last() (*core.Memslice, error)
	Find() ([]*core.Memslice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Memslice, err error)
	FindInBatches(result *[]*core.Memslice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*core.Memslice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemsliceDo
	Assign(attrs ...field.AssignExpr) IMemsliceDo
	Joins(fields ...field.RelationField) IMemsliceDo
	Preload(fields ...field.RelationField) IMemsliceDo
	FirstOrInit() (*core.Memslice, error)
	FirstOrCreate() (*core.Memslice, error)
	FindByPage(offset int, limit int) (result []*core.Memslice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemsliceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CreateMemslice(ctx context.Context, memslice *core.Memslice) (err error)
	GetMemslicesByRange(ctx context.Context, agentID uint64, start *time.Time, end *time.Time) (result []*core.Memslice, err error)
}

// INSERT INTO @@table (
//
//	response_type, agent_id, speaker_id,
//	is_monolog, i
//	ncluded_fact_ids, external_fact_ids,
//	related_memslice_ids,
//	content, status,
//	created_at, updated_at
//
// ) VALUES (
//
//	@memslice.ResponseType, @memslice.AgentID, @memslice.SpeakerID,
//	@memslice.IsMonolog,
//	@memslice.IncludedFactIDs, @memslice.ExternalFactIDs,
//	@memslice.RelatedMemsliceIDs,
//	@memslice.Content, 0,
//	NOW(), NOW()
//
// ) RETURNING id;
func (m memsliceDo) CreateMemslice(ctx context.Context, memslice *core.Memslice) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, memslice.ResponseType)
	params = append(params, memslice.AgentID)
	params = append(params, memslice.SpeakerID)
	params = append(params, memslice.IsMonolog)
	params = append(params, memslice.IncludedFactIDs)
	params = append(params, memslice.ExternalFactIDs)
	params = append(params, memslice.RelatedMemsliceIDs)
	params = append(params, memslice.Content)
	generateSQL.WriteString("INSERT INTO memslices ( response_type, agent_id, speaker_id, is_monolog, i ncluded_fact_ids, external_fact_ids, related_memslice_ids, content, status, created_at, updated_at ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, 0, NOW(), NOW() ) RETURNING id; ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// WHERE
//
//	agent_id = @agentID AND
//	created_at >= @start AND
//	created_at <= @end
//
// ORDER BY created_at DESC;
func (m memsliceDo) GetMemslicesByRange(ctx context.Context, agentID uint64, start *time.Time, end *time.Time) (result []*core.Memslice, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, agentID)
	params = append(params, start)
	params = append(params, end)
	generateSQL.WriteString("SELECT * FROM memslices WHERE agent_id = ? AND created_at >= ? AND created_at <= ? ORDER BY created_at DESC; ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m memsliceDo) Debug() IMemsliceDo {
	return m.withDO(m.DO.Debug())
}

func (m memsliceDo) WithContext(ctx context.Context) IMemsliceDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memsliceDo) ReadDB() IMemsliceDo {
	return m.Clauses(dbresolver.Read)
}

func (m memsliceDo) WriteDB() IMemsliceDo {
	return m.Clauses(dbresolver.Write)
}

func (m memsliceDo) Session(config *gorm.Session) IMemsliceDo {
	return m.withDO(m.DO.Session(config))
}

func (m memsliceDo) Clauses(conds ...clause.Expression) IMemsliceDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memsliceDo) Returning(value interface{}, columns ...string) IMemsliceDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memsliceDo) Not(conds ...gen.Condition) IMemsliceDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memsliceDo) Or(conds ...gen.Condition) IMemsliceDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memsliceDo) Select(conds ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memsliceDo) Where(conds ...gen.Condition) IMemsliceDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memsliceDo) Order(conds ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memsliceDo) Distinct(cols ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memsliceDo) Omit(cols ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memsliceDo) Join(table schema.Tabler, on ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memsliceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memsliceDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memsliceDo) Group(cols ...field.Expr) IMemsliceDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memsliceDo) Having(conds ...gen.Condition) IMemsliceDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memsliceDo) Limit(limit int) IMemsliceDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memsliceDo) Offset(offset int) IMemsliceDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memsliceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemsliceDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memsliceDo) Unscoped() IMemsliceDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memsliceDo) Create(values ...*core.Memslice) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memsliceDo) CreateInBatches(values []*core.Memslice, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memsliceDo) Save(values ...*core.Memslice) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memsliceDo) First() (*core.Memslice, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*core.Memslice), nil
	}
}

func (m memsliceDo) Take() (*core.Memslice, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*core.Memslice), nil
	}
}

func (m memsliceDo) Last() (*core.Memslice, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*core.Memslice), nil
	}
}

func (m memsliceDo) Find() ([]*core.Memslice, error) {
	result, err := m.DO.Find()
	return result.([]*core.Memslice), err
}

func (m memsliceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Memslice, err error) {
	buf := make([]*core.Memslice, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memsliceDo) FindInBatches(result *[]*core.Memslice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memsliceDo) Attrs(attrs ...field.AssignExpr) IMemsliceDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memsliceDo) Assign(attrs ...field.AssignExpr) IMemsliceDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memsliceDo) Joins(fields ...field.RelationField) IMemsliceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memsliceDo) Preload(fields ...field.RelationField) IMemsliceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memsliceDo) FirstOrInit() (*core.Memslice, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*core.Memslice), nil
	}
}

func (m memsliceDo) FirstOrCreate() (*core.Memslice, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*core.Memslice), nil
	}
}

func (m memsliceDo) FindByPage(offset int, limit int) (result []*core.Memslice, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memsliceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memsliceDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memsliceDo) Delete(models ...*core.Memslice) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memsliceDo) withDO(do gen.Dao) *memsliceDo {
	m.DO = *do.(*gen.DO)
	return m
}
